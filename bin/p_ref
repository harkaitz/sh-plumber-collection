#!/bin/sh -e
#L:
#L:  MIT License
#L:  
#l:  Bug reports, feature requests to gemini|https://harkadev.com/oss
#l:  Copyright (c) 2022 Harkaitz Agirre, harkaitz.aguirre@gmail.com
#L:
#L:  Permission is hereby granted, free of charge, to any person obtaining
#L:  a copy of this software and associated documentation files (the
#L:  "Software"), to deal in the Software without restriction, including
#L:  without limitation the rights to use, copy, modify, merge, publish,
#L:  distribute, sublicense, and/or sell copies of the Software, and to
#L:  permit persons to whom the Software is furnished to do so, subject to
#L:  the following conditions:
#L:
#L:  The above copyright notice and this permission notice shall be
#L:  included in all copies or substantial portions of the Software.
#L:
#L:  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#L:  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#L:  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#L:  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#L:  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#L:  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#L:  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##:
#h: Usage: $0 KEY
#h:
#h: Fast typing of short texts, mostly references.
#h:
#h:     -v         : Show configuration.
#h:     -a KEY VAL : Add key/value.
#h:     -d KEY...  : Delete keys.
#h:     -l         : List keys.
. p_show
. p_menu
p_ref() {
    ## Parse command line arguments.
    local OPTIND optopt ops=
    while getopts "vadl" optopt; do # OPTARG
        local ops="${ops}${optopt}"
        case $optopt in
            v)  p_ref_show_variables; return 1;;
            \?) return 1;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    case "${ops}" in
        *a*) p_ref_add "$@" ;;
        *d*) p_ref_del "$@" ;;
        *l*) p_ref_list     ;;
        '')  if test -n "${P_MODE}"; then
                 p_ref_info
             else
                 p_ref_get "$@"
             fi;;
    esac
}
p_ref_show_variables() {
    printf '%-20s : %s\n' P_REF_DIR "${P_REF_DIR}"
}
p_ref_calc_variables() {
    P_REF_DIR="${P_REF_DIR:-${HOME}/.p_ref}"
}
## -----------------------------------------------------------------------------
p_ref_info() {
    local sel="`p_ref_list | p_menu 'Select'`"
    test -n "${sel}"
    local txt="`p_ref_get "${sel}"`"
    test -n "${txt}"
    xdotool type "${txt}"
}
## -----------------------------------------------------------------------------
p_ref_add() {
    case "${1}" in
        '') error "Please specify a key."; return 1;;
        *)  local key="${1}"; shift;;
    esac
    case "${1}" in
        '') error "Please specify a value."; return 1;;
        *)  local val="${*}";;
    esac
    mkdir -p "${P_REF_DIR}"
    printf '%s' "${val}" > "${P_REF_DIR}/${key}.txt"
}
p_ref_del() {
    local k=
    for k in "$@"; do
        rm -fv "${P_REF_DIR}/${key}.txt"
    done
}
p_ref_list() {
    if test -d "${P_REF_DIR}"; then
        find "${P_REF_DIR}" -iregex '.*\.txt' -exec 'basename' '{}' '.txt' ';'
    fi
}
p_ref_get() {
    local f="${P_REF_DIR}/${1}.txt"
    if test ! -n "${1}"; then
        error "Please specify a key."
        return 1
    fi
    if test ! -f "${f}"; then
        error "Key ${f} not found."
        return 1
    fi
    cat "${f}"
}





## -----------------------------------------------------------------------------
error() { echo "${SCRNAME}: $*" >&2; }
p_ref_calc_variables
SCRNAME="`basename "$0"`"
if test @"${SCRNAME}" = @"p_ref";then
    case "${1}" in
        ''|-h|--help)
            sed -n 's/^ *#h: \{0,1\}//p' "$0" | sed "s|\\\$0|${SCRNAME}|g"
            echo ""
            sed -n 's/^ *#l: \{0,2\}//p' "$0"
            ;;
        plumbs)
            echo "Put a snippet."
            ;;
        *)
            p_ref "$@"
            ;;
    esac
fi
